"use client"

import React from 'react';
import { AlertTriangle, ExternalLink, Shield, Clock, Bug, TrendingUp } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Tooltip } from '@/components/ui/tooltip';
import { 
  type VulnerabilityAssessment, 
  type CVEInfo, 
  getCVSSSeverityStyle, 
  formatCVSSScore, 
  getVulnerabilityAge 
} from '@/lib/cve-service';

interface VulnerabilityDetailsProps {
  assessment: VulnerabilityAssessment;
  className?: string;
}

export default function VulnerabilityDetails({ assessment, className }: VulnerabilityDetailsProps) {
  if (assessment.totalVulnerabilities === 0) {
    return (
      <Card className={`border-green-200 bg-green-50 ${className}`}>
        <CardContent className="p-4">
          <div className="flex items-center gap-2 text-green-800">
            <Shield className="h-5 w-5" />
            <span className="font-medium">No Known Vulnerabilities</span>
          </div>
          <p className="text-sm text-green-700 mt-1">
            Great! No vulnerabilities were found in the scanned packages.
          </p>
        </CardContent>
      </Card>
    );
  }

  const criticalVulns = assessment.packagesWithVulns
    .flatMap(pkg => pkg.vulnerabilities.filter(v => v.severity === 'CRITICAL'));
  const highVulns = assessment.packagesWithVulns
    .flatMap(pkg => pkg.vulnerabilities.filter(v => v.severity === 'HIGH'));

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Vulnerability Summary */}
      <Card className="border-red-200 bg-red-50">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-lg text-red-900">
            <Bug className="h-5 w-5" />
            Vulnerability Assessment
            <Tooltip content="Based on known CVE database and security advisories">
              <span className="text-xs text-red-600 cursor-help">ℹ️</span>
            </Tooltip>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Severity Breakdown */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <div className="text-sm font-medium text-red-900">Severity Breakdown</div>
              <div className="space-y-1">
                {assessment.criticalCount > 0 && (
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-red-800">Critical</span>
                    <span className="font-bold bg-red-200 px-2 py-0.5 rounded text-red-800">
                      {assessment.criticalCount}
                    </span>
                  </div>
                )}
                {assessment.highCount > 0 && (
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-orange-800">High</span>
                    <span className="font-bold bg-orange-200 px-2 py-0.5 rounded text-orange-800">
                      {assessment.highCount}
                    </span>
                  </div>
                )}
                {assessment.mediumCount > 0 && (
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-yellow-800">Medium</span>
                    <span className="font-bold bg-yellow-200 px-2 py-0.5 rounded text-yellow-800">
                      {assessment.mediumCount}
                    </span>
                  </div>
                )}
                {assessment.lowCount > 0 && (
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-green-800">Low</span>
                    <span className="font-bold bg-green-200 px-2 py-0.5 rounded text-green-800">
                      {assessment.lowCount}
                    </span>
                  </div>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <div className="text-sm font-medium text-red-900">Risk Metrics</div>
              <div className="space-y-1">
                <div className="flex items-center justify-between text-xs">
                  <span className="text-red-800">Overall Risk Score</span>
                  <span className="font-bold text-red-800">{assessment.overallRiskScore}/100</span>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-red-800">Packages Affected</span>
                  <span className="font-bold text-red-800">{assessment.packagesWithVulns.length}</span>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-red-800">Total Issues</span>
                  <span className="font-bold text-red-800">{assessment.totalVulnerabilities}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Risk Score Bar */}
          <div>
            <div className="flex items-center justify-between mb-1">
              <span className="text-xs text-red-800">Risk Level</span>
              <span className="text-xs font-bold text-red-800">
                {assessment.overallRiskScore >= 80 ? 'Critical' :
                 assessment.overallRiskScore >= 60 ? 'High' :
                 assessment.overallRiskScore >= 40 ? 'Medium' : 'Low'}
              </span>
            </div>
            <div className="w-full bg-red-200 rounded-full h-2">
              <div
                className="h-2 rounded-full transition-all duration-300"
                style={{
                  width: `${assessment.overallRiskScore}%`,
                  backgroundColor: assessment.overallRiskScore >= 80 ? '#dc2626' :
                                   assessment.overallRiskScore >= 60 ? '#ea580c' :
                                   assessment.overallRiskScore >= 40 ? '#d97706' : '#059669'
                }}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Critical Vulnerabilities */}
      {criticalVulns.length > 0 && (
        <Card className="border-red-400 bg-red-100">
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2 text-base text-red-900">
              <AlertTriangle className="h-4 w-4" />
              Critical Vulnerabilities ({criticalVulns.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {criticalVulns.slice(0, 3).map((vuln, idx) => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} compact />
            ))}
            {criticalVulns.length > 3 && (
              <div className="text-xs text-red-700 font-medium">
                ... and {criticalVulns.length - 3} more critical vulnerabilities
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* High Severity Vulnerabilities */}
      {highVulns.length > 0 && criticalVulns.length === 0 && (
        <Card className="border-orange-300 bg-orange-50">
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2 text-base text-orange-900">
              <TrendingUp className="h-4 w-4" />
              High Severity Vulnerabilities ({highVulns.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {highVulns.slice(0, 2).map((vuln, idx) => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} compact />
            ))}
            {highVulns.length > 2 && (
              <div className="text-xs text-orange-700 font-medium">
                ... and {highVulns.length - 2} more high severity vulnerabilities
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Affected Packages */}
      <Card className="border-gray-200">
        <CardHeader className="pb-2">
          <CardTitle className="text-base text-gray-900">
            Affected Packages ({assessment.packagesWithVulns.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {assessment.packagesWithVulns.slice(0, 5).map((pkg, idx) => (
              <div key={`${pkg.packageName}-${idx}`} className="flex items-center justify-between text-sm bg-gray-50 p-2 rounded">
                <div className="flex-1">
                  <div className="font-medium text-gray-900">{pkg.packageName}</div>
                  {pkg.packageVersion && (
                    <div className="text-xs text-gray-600">v{pkg.packageVersion}</div>
                  )}
                </div>
                <div className="flex items-center gap-2">
                  <div className="text-xs text-gray-700">
                    {pkg.vulnerabilities.length} issue{pkg.vulnerabilities.length !== 1 ? 's' : ''}
                  </div>
                  <div
                    className="px-2 py-0.5 rounded text-xs font-medium"
                    style={{
                      backgroundColor: pkg.riskScore >= 80 ? '#fee2e2' :
                                       pkg.riskScore >= 60 ? '#fed7aa' :
                                       pkg.riskScore >= 40 ? '#fef3c7' : '#d1fae5',
                      color: pkg.riskScore >= 80 ? '#991b1b' :
                             pkg.riskScore >= 60 ? '#c2410c' :
                             pkg.riskScore >= 40 ? '#92400e' : '#065f46'
                    }}
                  >
                    Risk: {pkg.riskScore}
                  </div>
                </div>
              </div>
            ))}
            {assessment.packagesWithVulns.length > 5 && (
              <div className="text-xs text-gray-600 text-center py-1">
                ... and {assessment.packagesWithVulns.length - 5} more packages
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// Individual Vulnerability Card Component
function VulnerabilityCard({ vulnerability, compact = false }: { vulnerability: CVEInfo, compact?: boolean }) {
  const severityStyle = getCVSSSeverityStyle(vulnerability.severity);

  return (
    <div 
      className={`border rounded p-3 ${compact ? 'text-xs' : 'text-sm'}`}
      style={{ borderColor: severityStyle.color, backgroundColor: severityStyle.bgColor }}
    >
      <div className="flex items-start justify-between mb-2">
        <div className="flex-1">
          <div className="font-bold" style={{ color: severityStyle.textColor }}>
            {vulnerability.id}
          </div>
          <div className="text-xs" style={{ color: severityStyle.textColor, opacity: 0.8 }}>
            {getVulnerabilityAge(vulnerability.ageInDays)}
          </div>
        </div>
        
        <div className="flex flex-col items-end gap-1">
          <div
            className="px-2 py-0.5 rounded text-xs font-medium"
            style={{ backgroundColor: severityStyle.color, color: 'white' }}
          >
            {vulnerability.severity}
          </div>
          {vulnerability.cvssScore && (
            <div className="text-xs" style={{ color: severityStyle.textColor }}>
              CVSS: {vulnerability.cvssScore.toFixed(1)}
            </div>
          )}
        </div>
      </div>

      <div className="mb-2" style={{ color: severityStyle.textColor }}>
        {compact ? 
          vulnerability.summary.substring(0, 100) + (vulnerability.summary.length > 100 ? '...' : '') :
          vulnerability.summary
        }
      </div>

      <div className="flex items-center gap-3 text-xs">
        {vulnerability.exploitAvailable && (
          <Tooltip content="Active exploits are known to exist for this vulnerability">
            <div className="flex items-center gap-1 text-red-600 font-medium">
              <AlertTriangle className="h-3 w-3" />
              Exploit Available
            </div>
          </Tooltip>
        )}
        
        {vulnerability.patchAvailable && (
          <Tooltip content="A patch or update is available to fix this vulnerability">
            <div className="flex items-center gap-1 text-green-600 font-medium">
              <Shield className="h-3 w-3" />
              Patch Available
            </div>
          </Tooltip>
        )}

        <div className="flex items-center gap-1" style={{ color: severityStyle.textColor }}>
          <Clock className="h-3 w-3" />
          Urgency: {vulnerability.urgencyScore}/100
        </div>
      </div>

      {!compact && vulnerability.references && vulnerability.references.length > 0 && (
        <div className="mt-2 pt-2 border-t" style={{ borderColor: severityStyle.color, opacity: 0.3 }}>
          <div className="flex flex-wrap gap-2">
            {vulnerability.references.slice(0, 2).map((ref, idx) => (
              <a
                key={idx}
                href={ref}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-1 text-xs hover:underline"
                style={{ color: severityStyle.textColor }}
              >
                Reference <ExternalLink className="h-2.5 w-2.5" />
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
